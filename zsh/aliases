#!/usr/bin/env bash

# --- Shell & System ---
alias c='clear'
alias zz='exec $SHELL'
alias wh='which'
alias line-count="find . -type f ! -path '*/.git/*' -print0 | xargs -0 cat | wc -l"

# --- System Info & Monitoring ---
alias ff="fastfetch"
alias disk="touch /mnt/NAS/NFS_MOUNT && touch /mnt/backups/NFS_MOUNT && duf --hide-mp /home,/.snapshots,/var/log,/var/cache/pacman/pkg --hide special"
alias zsh-255-colors='for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done'

# --- File Operations ---
alias y='yazi'
alias cp='cp --interactive'
alias mv='mv --interactive'
alias rm='rm --interactive'
alias ..='cd ..'
alias untar='tar xvf'
alias less='less --quiet'
alias compress_photos="find . -maxdepth 1 -type f \( -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.png' \) -exec mogrify -resize 1920x1080\> -quality 85 {} +"

# --- ls / exa ---
alias ls='eza --group-directories-first --icons=auto'
alias la='ls -a'
alias ll='ls -l'
alias lla='ls -la'
alias ldot='ls -ld .*'

# --- Disk Usage ---
alias df='df --human-readable'
alias du='du --human-readable'

# --- Networking ---
alias ip4='ip -br -c -4 a'
alias ip6='ip -br -c -6 a'
alias mon-ip="curl -s ifconfig.me | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}'"

# --- Clipboard Management ---
alias copy="wl-copy"
alias paste="wl-paste"
alias cbc="cliphist list | fzf --no-sort | cliphist decode | wl-copy"
alias cbd="cliphist list | fzf --no-sort | cliphist delete"

# --- Editor & Development Tools ---
alias vim=nvim
alias vv="nvim -c \"lua require('telescope.builtin').find_files()\""

# --- Quick Vim (dotfiles & projects) ---
alias vva="cd $HOME/dotfiles; nvim $HOME/dotfiles/zsh/aliases"
alias vvd='cd $HOME/dotfiles; nvim -c "lua require(\"user.telescope_dot\")"'
alias vvv='cd $HOME/dotfiles; nvim -c "lua require(\"user.telescope_nvim\")"'
alias vvb='cd $HOME/.local/bin/; nvim -c "lua require(\"user.telescope_bin\")"'
alias vvc='cd $HOME/Projets/rkb/crawler; nvim -c "lua require(\"user.telescope_crawler\")"'

# --- Database Connections ---
alias rkb-db-connect-prod="rainfrog --username postgres --database rkb_db --host 192.168.100.6 --port 5432 --driver postgres --password \$RKB_DB_PASSWORD"
alias rkb-db-connect-local="rainfrog --username postgres --database rkb_db --host localhost --port 5432 --driver postgres --password \$RKB_DB_PASSWORD"

# --- External Tools ---
alias portfolio="ticker --config ~/Coffre/portfolio.yaml"
alias gemini-cli="npx https://github.com/google-gemini/gemini-cli"

# --- Notes/Obsidian ---
alias td="note.sh todo"
alias oh="note.sh home"
alias or="note.sh inbox"
alias on="note.sh new"
alias oj="note.sh journal"
alias ow="note.sh dailies"
alias oq="note.sh quick-switch"
alias os="note.sh grep"
alias ot="note.sh new-from-template"
alias oa="note.sh search-by-tags"

# --- Tmux ---
t() { tmux attach || tmux new -s "$(uname -n)"; }
alias ts='session=$(sesh list | fzf --height=90% --layout=reverse --border --border-label " sesh ") && sesh connect "$session" || read'

# --- Docker ---
alias olm="docker exec -it ollama ollama"
alias lzd="lazydocker"

# --- Git ---
alias lzg="lazygit"
alias g="git status"
alias ga="git add"
alias gap="git add --patch"
alias gaa="git add ."
alias gau="git add -u"
alias gc="git commit"
alias gcm="git commit -m"
alias gca="git commit -am"
alias gb="git branch"
alias gbd="git branch -d"
alias gco="git checkout"
alias gcob="git checkout -b"
alias gt="git stash"
alias gta="git stash apply"
alias gm="git merge"
alias gr="git rebase"
alias gl="git log --all --graph --pretty=format:'%C(magenta)%h %C(brightblack)%an %ar%C(auto) %D%n%s%n'"
alias gs="git show"
alias gd="git diff --color --color-words"
alias gdc="git diff --cached"
alias gbl="git blame"
alias gps="git push"
alias gpl="git pull"
alias grmc="git rm -r --cached"

# --- Python ---
alias venv-activate="source .venv/bin/activate"
alias va="venv-activate"

# --- Package Management ---
if [[ "$(uname)" == "Linux" ]]; then
    if [ -f /etc/os-release ]; then
        source /etc/os-release
        if [[ "$ID" == "arch" ]]; then
            # Arch-specific aliases
            alias up="pu"
        elif [[ "$ID" == "debian" || "$ID" == "ubuntu" ]]; then
            # Debian-specific aliases
            alias up="au"
        fi
    fi
fi

# Pacman/Paru
alias pu='paru; pkill -SIGRTMIN+8 waybar; flatpak update'
alias pi='paru -Si'
alias pr='paru -Rs'
alias pl='pacman -Q'
alias ple='pacman -Qe'
alias pla='pacman -Qem'
alias pc='sudo pacman -Scc'
alias sp='parui'

# Apt
alias au='sudo apt update && sudo apt upgrade && sudo apt dist-upgrade && sudo apt autoremove && sudo apt autoclean && sudo apt clean && flatpak update'
alias ai="sudo apt install"
alias ap="sudo apt purge"
alias ar="sudo apt remove"
alias as="apt search"

# Flatpak
alias fp='flatpak'

# --- Backups
# Create /etc backup with timestamp
bkp-etc() {
    if [ ! -d ~/Coffre/etc ]; then
        echo "❌ Error: ~/Coffre/etc directory does not exist"
        return 1
    fi

    if sudo tar -czf ~/Coffre/etc/etc_backup-$(date +%F).tar.gz /etc 2>/dev/null; then
        echo "Etc backup saved to ~/Coffre/etc/etc_backup-$(date +%F).tar.gz"
    else
        echo "❌ Error: Failed to create etc backup"
        return 1
    fi
}

# Export installed packages list
bkp-pkglist() {
    if ! command -v paru >/dev/null 2>&1; then
        echo "❌ Error: paru not found"
        return 1
    fi

    if [ ! -d ~/Coffre ]; then
        echo "❌ Error: ~/Coffre directory does not exist"
        return 1
    fi

    if rm -f ~/Coffre/paclist.txt && paru -Qqe >~/Coffre/paclist.txt 2>/dev/null; then
        echo "Packages list saved to ~/Coffre/paclist.txt"
    else
        echo "❌ Error: Failed to export packages list"
        return 1
    fi
}

# Clean old /etc backups (keep only 3 most recent)
bkp-etc-clean() {
    if [ ! -d ~/Coffre/etc ]; then
        echo "❌ Error: ~/Coffre/etc directory does not exist"
        return 1
    fi

    cd ~/Coffre/etc/ &&
        ls -t etc_backup-*.tar.gz 2>/dev/null | tail -n +4 | xargs rm -v 2>/dev/null &&
        echo 'Etc backups cleaned' || echo 'No old backups to clean'
}

# Run all backup tasks
bkp() {
    bkp-etc &&
        bkp-pkglist &&
        bkp-etc-clean &&
        ~/.local/bin/btrfs-backup.sh &&
        cd $HOME &&
        echo '🟢 All backups completed successfully'
}
