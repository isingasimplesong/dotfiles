# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Set the prompt based on user privilege level
# (powerlevel10k override this, if installed)
if [ "`id -u`" -eq 0 ]; then
    # Root user prompt
    export PS1="%{[36;1m%}%T %{[34m%}%n%{[33m%}@%{[37m%}%m %{[32m%}%~ %{[33m%}%#%{[0m%} "
else
    # Non-root user prompt
    export PS1="%{[36;1m%}%T %{[31m%}%n%{[33m%}@%{[37m%}%m %{[32m%}%~ %{[33m%}%#%{[0m%} "
fi

# Mise √† jour du titre du terminal avec la commande actuelle pour les terminaux compatibles xterm
case "$TERM" in
    xterm*|rxvt*)
        # Ex√©cut√© avant chaque commande
        preexec() {
            print -Pn "\e]0;$1\a"
        }
        # Ex√©cut√© avant l'affichage de l'invite de commande
        precmd() {
            print -Pn "\e]0;%n@%m: %~\a"
        }
        ;;
esac

# Disable beeping on various events
unsetopt beep
unsetopt hist_beep
unsetopt list_beep

# Prevent overwriting of existing files with redirection
unsetopt clobber

# Require explicit `exit` command to exit the shell
unsetopt ignore_eof

# Display exit status of the last command when non-zero
setopt print_exit_value

# Ask for confirmation before using 'rm *'
unsetopt rm_star_silent

# Make sure that pathname patterns that do not match any files expand to a null string
setopt nullglob

# Completion
zstyle ':completion:*' menu select
fpath+=~/.zfunc

# Disable listing of ambiguous completions
unsetopt list_ambiguous

# Remove trailing slash from directories upon completion
setopt auto_remove_slash

# Don't consider hidden files for completion
unsetopt glob_dots

# Resolve symlinks for completion
setopt chase_links

# Verify history expansion result
setopt hist_verify

# Change to directories without `cd` command
setopt auto_cd

# Automatically push directories onto directory stack
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushd_silent
setopt pushd_to_home

# Don't run background jobs at lower priority
unsetopt bg_nice

# Don't send SIGHUP to running jobs on exit
unsetopt hup

# Set the maximum number of history entries
export HISTORY=50000
export SAVEHIST=50000
export HISTSIZE=50000
export HISTFILE=$HOME/.history

# Configure history saving options
setopt share_history
setopt inc_append_history
setopt append_history
setopt hist_ignore_dups
setopt hist_ignore_all_dups
setopt hist_expire_dups_first
setopt hist_find_no_dups

# Handle "command not found" errors
[[ -r /etc/zsh_command_not_found ]] && . /etc/zsh_command_not_found

# Source alias, environment variables and secret environment variables files
export DOTPATH="$HOME/dotfiles"
source $DOTPATH/zsh/aliases
source $DOTPATH/zsh/env
if [[ -f $DOTPATH/zsh/secrets ]]; then
    source $DOTPATH/zsh/secrets
fi
if [[ -f $DOTPATH/zsh/uv-zsh-completion ]]; then
    source $DOTPATH/zsh/uv-zsh-completion
fi

# Load and initialize the completion system
autoload -Uz compinit
compinit -C

# tailscale completion
source <(tailscale completion zsh)

# Load and initialize the prompt system
autoload -U promptinit; promptinit

# Load and apply the 'dir_colors' configuration, if available
test -r /etc/dir_colors && eval $(dircolors /etc/dir_colors)

# Set the keymap to vi mode
bindkey -v

# interactive new session in tmux

tn() {
    printf "Session name: "
    read session_name
    session_name=${session_name:-$(date +%d%H%M%S)}
    tmux new-session -d -s "$session_name" && tmux switch-client -t "$session_name"
}

# sesh
function sesh-sessions() {
  {
    exec </dev/tty
    exec <&1
    local session
    session=$(sesh list | fzf --height 90% --reverse --border-label ' sesh ' --border )
    zle reset-prompt > /dev/null 2>&1 || true
    [[ -z "$session" ]] && return
    sesh connect $session
  }
}

zle     -N             sesh-sessions
bindkey -M emacs '\es' sesh-sessions
bindkey -M vicmd '\es' sesh-sessions
bindkey -M viins '\es' sesh-sessions

# mkcd
mkcd() {
  if [ -z "$1" ]; then
    echo "Erreur : sp√©cifie un nom de r√©pertoire."
    return 1
  fi
  mkdir -p "$1" && cd "$1"
}

# load stuff depending on the OS
if [[ "$(uname)" == "Linux" ]]; then
    if [ -f /etc/os-release ]; then
        source /etc/os-release
        if [[ "$ID" == "arch" ]]; then
            # Arch-specific settings
            source /usr/share/fzf/key-bindings.zsh
            source /usr/share/fzf/completion.zsh
            source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
            source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
            # Initialize zoxide
            eval "$(zoxide init --cmd cd zsh)"
        elif [[ "$ID" == "debian" || "$ID" == "ubuntu" ]]; then
            # Debian-specific settings
            source /usr/share/doc/fzf/examples/key-bindings.zsh
            source /usr/share/doc/fzf/examples/completion.zsh
            source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
            source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
        fi
    fi
fi

# run Tmux if in a ssh session
if [ -n "$SSH_CONNECTION" ] && [ -z "$TMUX" ]; then
    host="$(hostname)"
    tmux -u attach || tmux -u new -s "${host}"
fi

# initialise p10k if installed
if [[ -f /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme ]]; then
    source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme
    # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
    p10k="$HOME/dotfiles/zsh/p10k.zsh"
    [[ ! -f $p10k ]] || source $p10k
elif [[ -f ~/.local/share/powerlevel10k/powerlevel10k.zsh-theme ]]; then
    source ~/.local/share/powerlevel10k/powerlevel10k.zsh-theme
    p10k="$HOME/dotfiles/zsh/p10k.zsh"
    [[ ! -f $p10k ]] || source $p10k
fi

# run neofetch if installed
if command -v neofetch >/dev/null 2>&1; then
    neofetch
fi


