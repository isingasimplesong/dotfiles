# Si bash n'est pas interactif, ne rien faire et sortir
[ -z "$PS1" ] && return

# ====== CONFIGURATION DU PROMPT ======
# # 31m = rouge, 32m = vert, 33m = jaune, 34m = bleu, 36m = cyan, 37m = blanc
# if [ $(id -u) -eq 0 ]; then
#     # Prompt pour root
#     PS1="\[\e[36;1m\]\t \[\e[34m\]\u\[\e[33m\]@\[\e[37m\]\h \[\e[32m\]\w \[\e[33m\]#\[\e[0m\] "
# else
#     # Prompt pour utilisateur normal
#     PS1="\[\e[36;1m\]\t \[\e[31m\]\u\[\e[33m\]@\[\e[37m\]\h \[\e[32m\]\w \[\e[33m\]$\[\e[0m\] "
# fi

# ====== CONFIGURATION DU TERMINAL ======
# Met à jour le titre du terminal
case "$TERM" in
xterm* | rxvt*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
    ;;
esac

# ====== HISTORIQUE ======
# Taille de l'historique
HISTSIZE=50000
HISTFILESIZE=50000
HISTFILE=~/.bash_history

# Ignore les commandes en double et les lignes commençant par un espace
HISTCONTROL=ignoreboth:erasedups

# Format de l'historique avec timestamp
HISTTIMEFORMAT="%F %T "

# Ajoute immédiatement les commandes à l'historique
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

# ====== OPTIONS ======
# Active le completion case-insensitive
bind "set completion-ignore-case on"

# Active le mode vi pour l'édition de ligne
set -o vi

# Désactive le bip
bind "set bell-style none"

if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

source ~/dotfiles/zsh/aliases
source ~/dotfiles/zsh/env
if [ -f ~/dotfiles/bash/secrets ]; then
    source ~/dotfiles/bash/secrets
fi

# ====== CONFIGURATION SPÉCIFIQUE AU SYSTÈME ======
if [[ "$(uname)" == "Linux" ]]; then
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        if [[ "$ID" == "arch" ]]; then
            # Configuration spécifique à Arch
            [ -f /usr/share/fzf/key-bindings.bash ] && source /usr/share/fzf/key-bindings.bash
            [ -f /usr/share/fzf/completion.bash ] && source /usr/share/fzf/completion.bash
        elif [[ "$ID" == "debian" || "$ID" == "ubuntu" ]]; then
            # Configuration spécifique à Debian/Ubuntu
            [ -f /usr/share/doc/fzf/examples/key-bindings.bash ] && source /usr/share/doc/fzf/examples/key-bindings.bash
            [ -f /usr/share/doc/fzf/examples/completion.bash ] && source /usr/share/doc/fzf/examples/completion.bash
        fi
    fi
fi

# ====== TMUX EN SSH ======
if [ -n "$SSH_CONNECTION" ] && [ -z "$TMUX" ]; then
    tmux -u attach || tmux -u new -s $(uname --nodename)
fi

if command -v neofetch >/dev/null 2>&1; then
    neofetch
fi

# Fonction pour créer et entrer dans un répertoire
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Fonction pour remonter dans l'arborescence avec ..
up() {
    local d=""
    limit=$1
    for ((i = 1; i <= limit; i++)); do
        d=$d/..
    done
    d=$(echo $d | sed 's/^\///')
    if [ -z "$d" ]; then
        d=..
    fi
    cd $d
}

# Active les couleurs pour ls et grep
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Ajoute ~/.local/bin au PATH si il existe
if [ -d "$HOME/.local/bin" ]; then
    PATH="$HOME/.local/bin:$PATH"
fi

LP_PATH="$HOME/.local/share/liquidprompt"
[[ $- = *i* ]] && source $LP_PATH/liquidprompt
# [[ $- = *i* ]] && source $HOME/.local/share/liquidprompt/themes/powerline/powerline.theme
# lp_theme powerline
[[ $- = *i* ]] && source $HOME/.local/share/liquidprompt/themes/unfold/unfold.theme
lp_theme unfold
# [[ $- = *i* ]] && source $HOME/.local/share/liquidprompt/themes/alternate_vcs/alternate_vcs.theme
# lp_theme alternate_vcs
